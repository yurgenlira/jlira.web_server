# SPDX-License-Identifier: MIT-0
---
# ============================================================================
# Basic Configuration
# ============================================================================

# Server hostname for Apache ServerName directive.
# Defaults to the system hostname.
# Type: String
apache_server_name: "{{ ansible_hostname }}"

# Enable or disable SSL support.
# Type: Boolean
apache_ssl_enabled: true

# ============================================================================
# PHP-FPM Integration Configuration
# ============================================================================

# Enable PHP-FPM integration with Apache.
# When true, Apache will be configured to proxy PHP requests to PHP-FPM.
# This automatically includes the PHP role to install and configure PHP-FPM.
# Type: Boolean
apache_php_fpm_integration: false

# PHP version for PHP-FPM integration.
# This should match the version configured in the PHP role.
# Used for creating version-specific configuration files and socket paths.
# Type: String
# Example: "8.4", "8.3", "8.2"
apache_php_fpm_version: "{{ php_version | default('8.4') }}"

# Set as Default PHP-FPM Handler
# When true, makes this PHP version the default handler for all PHP files.
# This creates a symlink in conf-enabled to enable the PHP-FPM configuration.
# When false, the configuration is created but not enabled (useful for multi-version setups).
# Type: Boolean
apache_php_fpm_set_default: true

# Proxy Timeout for PHP-FPM
# Maximum time in seconds Apache waits for PHP-FPM to respond.
# Increase for long-running scripts; decrease for fast-fail behavior.
# Default: 300 seconds (5 minutes)
# Type: Integer
apache_php_fpm_proxy_timeout: 300

# ============================================================================
# Apache Main Settings
# ============================================================================

# List of main Apache settings to be configured in apache2.conf.
# Each setting is defined as a dictionary with the following keys:
# - `name`: The name of the Apache directive to configure (e.g., LimitRequestLine, LimitRequestFieldSize).
# - `value`: The value to assign to the Apache directive.
# - `comment` (optional): A comment to include above the directive in the configuration file.
#
# The name `ServerName` is reserved for use with the `apache_server_name` setting,
# so it will be ignored to prevent conflicts.
#
# Example:
# apache_main_settings:
#   - name: LimitRequestLine
#     value: 8190
#     comment: |
#       Maximum size of the request line in bytes.
#       Helps prevent buffer overflow attacks.
#   - name: LimitRequestFieldSize
#     value: 8190
#     comment: Maximum size of each HTTP request header field in bytes.
# Type: List of Dictionaries
apache_main_settings: []

# ============================================================================
# Environment Variables
# ============================================================================

# List of custom environment variables to be configured in envvars file.
# Each variable is defined as a dictionary with the following keys:
# - `name`: The environment variable name (e.g., APACHE_LOG_DIR, CUSTOM_VAR).
# - `value`: The value to assign to the environment variable.
# - `comment` (optional): A comment to include above the variable definition.
#
# Example:
# apache_envvars:
#   - name: APACHE_CUSTOM_LOG_DIR
#     value: /var/log/apache2/custom
#     comment: Custom log directory for application logs
# Type: List of Dictionaries
apache_envvars: []

# ============================================================================
# Port Configuration
# ============================================================================

# List of HTTP ports to listen on.
# Type: List of Integers
apache_http_ports:
  - 80

# List of HTTPS ports to listen on (when SSL is enabled).
# Type: List of Integers
apache_https_ports:
  - 443

# ============================================================================
# Module Management
# ============================================================================

# List of Apache modules to enable.
# Common modules like "mpm_event",  "setenvif", "headers", "rewrite", "http2", "expires" are often included.
# Ensure required modules for features you enable are included here.
# Type: List of Strings
apache_modules_enabled: []

# ============================================================================
# Security Configuration
# ============================================================================

# Apache security settings to configure in security.conf.
# Each setting is defined as a dictionary with the following keys:
# - `name`: The Apache directive name (e.g., ServerTokens, ServerSignature).
# - `value`: The value to assign to the directive.
# Type: List of Dictionaries
apache_security_settings:
  - name: ServerTokens
    value: Prod
  - name: ServerSignature
    value: "Off"
  - name: TraceEnable
    value: "Off"

# ============================================================================
# Custom Configuration Files
# ============================================================================

# List of custom Apache configuration files to create.
# Each configuration file is defined as a dictionary with the following keys:
# - `name`: A descriptive name for the configuration (used in comments).
# - `path`: The absolute path where the file should be created
#           (e.g., "/data/apache-conf/custom-headers.conf").
# - `content`: The configuration content to write to the file.
#
# Example:
# apache_custom_configs:
#   - name: Custom security headers
#     path: /data/apache-conf/custom-headers.conf
#     content: |
#       # Custom security headers
#       Header always set X-Frame-Options "SAMEORIGIN"
#       Header always set X-Content-Type-Options "nosniff"
#       Header always set X-XSS-Protection "1; mode=block"
# Type: List of Dictionaries
apache_custom_configs: []

# ============================================================================
# Virtual Hosts Configuration
# ============================================================================

# List of virtual hosts to configure.
# Each virtual host is defined as a dictionary with the following keys:
#
# Common Configuration (applies to both HTTP and HTTPS):
# - `name`: A descriptive name for the virtual host config file like {{ name }}.conf or {{ name }}-ssl.conf.
# - `server_name`: The primary server name (FQDN) (optional).
# - `server_alias`: List of server aliases (optional).
# - `server_admin`: Email address of the server administrator (optional).
# - `document_root`: The document root directory for the virtual host.
#
# HTTP Configuration:
# - `http`: HTTP-specific configuration (optional)
#   - `enabled`: Whether to enable the HTTP virtual host. Default: true
#   - `listen`: List of the address:port or port to listen on. Default: "*:80"
#   - `error_log`: Path to the error log file. Default: ${APACHE_LOG_DIR}/<name>-error.log
#   - `access_log`: Path to the access log file. Default: ${APACHE_LOG_DIR}/<name>-access.log combined
#   - `custom_directives`: Additional Apache directives for HTTP only (optional).
#  apache_virtual_hosts:
#
# HTTPS Configuration:
# - `https`: HTTPS-specific configuration (optional)
#   - `enabled`: Whether to enable the HTTP virtual host. Default: true
#   - `listen`: List of the address:port or port to listen on. Default: "*:80"
#   - `error_log`: Path to the error log file. Default: ${APACHE_LOG_DIR}/<name>-error.log
#   - `access_log`: Path to the access log file. Default: ${APACHE_LOG_DIR}/<name>-access.log combined
#   - `certificate_file`: Path to the SSL certificate file (required for HTTPS).
#   - `certificate_key_file`: Path to the SSL certificate key file (required for HTTPS).
#   - `certificate_chain_file`: Path to the SSL certificate chain file (optional).
#   - `custom_directives`: Additional Apache directives for HTTP only (optional).
#
# Example - Simple HTTP virtual host:
# apache_virtual_hosts:
#   - name: example.com
#     server_name: example.com
#     server_alias:
#       - www.example.com
#     server_admin: admin@example.com
#     document_root: /var/www/example.com
#     http:
#       enabled: true
#       custom_directives: |
#         DirectoryIndex index.html index.php
#
# Example - HTTP and HTTPS virtual host:
# apache_virtual_hosts:
#   - name: secure.example.com
#     server_name: secure.example.com
#     document_root: /var/www/secure.example.com
#     http:
#       enabled: true
#       custom_directives: |
#         # Redirect all HTTP to HTTPS
#         Redirect permanent / https://secure.example.com/
#     https:
#       enabled: true
#       certificate_file: /etc/ssl/certs/example.com.crt
#       certificate_key_file: /etc/ssl/private/example.com.key
#       certificate_chain_file: /etc/ssl/certs/example.com-chain.crt
#       custom_directives: |
#         <Directory /var/www/secure.example.com>
#             Options -Indexes +FollowSymLinks
#             AllowOverride All
#             Require all granted
#         </Directory>
#
# Example - Disable a virtual host:
# apache_virtual_hosts:
#   - name: old-site.com
#     enabled: false
#
# Type: List of Dictionaries
apache_virtual_hosts: []

# ============================================================================
# Virtual Host Templates Configuration
# ============================================================================

# Directory where the virtual host templates are stored.
# Type: String
apache_vhost_templates_dir: /etc/apache2/templates

# List of reusable virtual host templates.
# Templates define a base configuration that can be reused by multiple virtual hosts
# with variable substitution. Each template is defined as a dictionary with:
#
# - `name`: A descriptive name for the virtual host config template file like {{ name }}.template.conf or {{ name }}-ssl.template.conf.
# - `http`: HTTP virtual host template content (optional)
#   - `content`: Jinja2 template content for HTTP configuration
# - `https`: HTTPS virtual host template content (optional)
#   - `content`: Jinja2 template content for HTTPS configuration
#
# Templates can use variables that will be substituted when creating virtual hosts.
# Variables are referenced using Jinja2 syntax: {{ variable_name }}
#
# Example:
# apache_vhost_templates:
#   - name: wordpress_site
#     http:
#       content: |
#         <VirtualHost *:80>
#             ServerName {{ server_name }}
#             DocumentRoot {{ document_root }}
#             <Directory {{ document_root }}>
#                 AllowOverride All
#                 Require all granted
#             </Directory>
#         </VirtualHost>
#
# Type: List of Dictionaries
apache_vhost_templates: []

# List of virtual hosts to create from templates.
# Each entry references a template and provides values for template variables.
#
# - `name`: A descriptive name for the virtual host config file like {{ name }}.conf or {{ name }}-ssl.conf.
# - `template`: Name of the template to use (must match a template from apache_vhost_templates)
# - `state`: State of the virtual host (present or absent). Default: present
# - `enabled`: Whether to enable the virtual host. Default: true
# - `vars`: Dictionary of variables to substitute in the template
#
# Example:
# apache_vhosts_from_template:
#   - name: myblog.com
#     template: wordpress_site
#     enabled: true
#     vars:
#       server_name: myblog.com
#       document_root: /var/www/myblog
#
# Type: List of Dictionaries
apache_vhosts_from_template: []

# ============================================================================
# Status Page Configuration
# ============================================================================

# Enable or disable Apache status page.
# When enabled, creates a /server-status endpoint for monitoring.
# Type: Boolean
apache_status_page_enabled: false

# List of hosts allowed to access the Apache status page.
# Each entry can be an IP address, hostname, or network range.
# Type: List of Strings
# Example:
# apache_status_page_allowed_hosts:
#   - 127.0.0.1
#   - 10.0.0.0/24
#   - monitoring.example.com
apache_status_page_allowed_hosts:
  - 127.0.0.1

# ============================================================================
# HTTP Authentication Configuration
# ============================================================================

# List of htpasswd files to create and manage.
# Each entry defines a password file with one or more users.
# Type: List of Dictionaries
#
# - `path`: Absolute path to the htpasswd file
# - `users`: List of users to add/update in the file
#   - `name`: Username
#   - `password`: Password in plaintext (will be hashed)
#   - `state`: present or absent (default: present)
#
# Example:
# apache_htpasswd_files:
#   - path: /etc/apache2/.htpasswd
#     users:
#       - name: admin
#         password: secure_password
#       - name: user1
#         password: another_password
#   - path: /etc/apache2/.htpasswd-api
#     users:
#       - name: api_user
#         password: api_secret
#
# Type: List of Dictionaries
apache_htpasswd_files: []
