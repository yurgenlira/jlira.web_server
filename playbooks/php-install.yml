# SPDX-License-Identifier: MIT-0
---
# Playbook for installing PHP
#
# This playbook installs and configures PHP on target servers.
# It can be used for fresh installations or adding PHP to servers
# that don't have it yet.
#
# Usage Examples:
#
# Basic installation (PHP 8.4 CLI only):
#   ansible-playbook -i inventory playbooks/php-install.yml
#
# With custom PHP version:
#   ansible-playbook -i inventory playbooks/php-install.yml \
#     -e "php_version=8.3"
#
# With PHP-FPM enabled:
#   ansible-playbook -i inventory playbooks/php-install.yml \
#     -e "php_fpm_enabled=true"
#
# With Composer:
#   ansible-playbook -i inventory playbooks/php-install.yml \
#     -e "php_composer_enabled=true"
#
# Full installation with FPM and Composer:
#   ansible-playbook -i inventory playbooks/php-install.yml \
#     -e "php_version=8.4" \
#     -e "php_fpm_enabled=true" \
#     -e "php_composer_enabled=true"
#
# Install specific packages:
#   ansible-playbook -i inventory playbooks/php-install.yml \
#     -e '{"php_packages": ["php8.4-cli", "php8.4-fpm", "php8.4-mysql", "php8.4-mbstring"]}'

- name: Install and Configure PHP
  hosts: webservers
  become: true

  roles:
    - role: jlira.web_server.php
      vars:
        # PHP version to install (default: 8.4)
        php_version: "{{ php_version | default('8.4') }}"

        # PHP packages to install
        # Customize this list based on your application requirements
        php_packages:
          - "php{{ php_version }}-cli"
          - "php{{ php_version }}-fpm"
          - "php{{ php_version }}-curl"
          - "php{{ php_version }}-mbstring"
          - "php{{ php_version }}-xml"
          - "php{{ php_version }}-zip"
          - "php{{ php_version }}-mysql"
          - "php{{ php_version }}-gd"

        # Set as default CLI version
        php_cli_set_as_default_version: true

        # Enable PHP-FPM (default: true)
        php_fpm_enabled: true

        # Enable Composer (default: false)
        # Uncomment or set via -e to enable
        # php_composer_enabled: true

        # Enable CLI error logging
        php_cli_logrotate_enabled: true

        # Enable FPM error logging
        php_fpm_logrotate_enabled: true

  post_tasks:
    - name: Verify PHP installation
      ansible.builtin.command: php --version
      register: php_version_check
      changed_when: false

    - name: Display installation summary
      ansible.builtin.debug:
        msg:
          - "═══════════════════════════════════════════════════════════════════════"
          - "PHP {{ php_version }} Installation Complete"
          - "═══════════════════════════════════════════════════════════════════════"
          - ""
          - "Installed:"
          - "  • PHP Version: {{ php_version }}"
          - "  • PHP-FPM: {{ 'Enabled' if php_fpm_enabled | default(true) else 'Disabled' }}"
          - "  • Composer: {{ 'Enabled' if php_composer_enabled | default(false) else 'Disabled' }}"
          - "  • Set as default CLI: {{ 'Yes' if php_cli_set_as_default_version | default(true) else 'No' }}"
          - ""
          - "PHP Version Check:"
          - >-
            {{ php_version_check.stdout_lines[0]
            if php_version_check.stdout_lines | length > 0
            else 'Version check failed' }}
          - ""
          - "Next steps:"
          - "  1. Configure your web server (Apache/Nginx) to use PHP-FPM"
          - "  2. Test PHP with: php -r 'phpinfo();' | head"
          - "  3. Verify FPM is running: systemctl status php{{ php_version }}-fpm"
          - "  4. Customize php.ini settings if needed"
          - ""
          - "═══════════════════════════════════════════════════════════════════════"